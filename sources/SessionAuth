<?php

use PHPAuth\Auth;

/**
 * SessionAuth class
 *
 * Overrides the Auth class to provide session-based authentication instead of cookie-based.
 */
class SessionAuth extends Auth {
    /**
     * Get the current session hash
     *
     * @return string
     */
    public function getCurrentSessionHash(): string
    {
        $expire = $_SESSION[$this->config->cookie_name . '_expire'] ?? 0;
        if ($expire > 0 && $expire < time()) {
            // Session expired, unset the session hash
            unset($_SESSION[$this->config->cookie_name]);
            unset($_SESSION[$this->config->cookie_name . '_expire']);
            return '';
        }

        return $_SESSION[$this->config->cookie_name] ?? '';
    }

    /* ============================================================================================================= */
    /* ============================================= PROTECTED METHODS ============================================= */
    /* ============================================================================================================= */

    /**
     * Creates a session for a specified user id
     *
     * @param int $uid
     * @param bool $remember
     * @return array|false $data
     */
    protected function addSession(int $uid, bool $remember)
    {
        $ip = self::getIp();
        $user = $this->getBaseUser($uid);

        if (!$user) {
            return false;
        }

        $data['hash'] = sha1($this->config->site_key . microtime());
        $agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';

        if (!$this->config->allow_concurrent_sessions) {
            $this->deleteExistingSessions($uid);
        }

        $data['expire'] = $remember ? strtotime($this->config->cookie_remember) : strtotime($this->config->cookie_forget);

        $data['cookie_crc'] = sha1($data['hash'] . $this->config->site_key);

        // Don't use INET_ATON(:ip), use ip2long() because SQLite or PostgreSQL does not have INET_ATON() function
        $query = "
            INSERT INTO {$this->config->table_sessions}
            (uid, hash, expiredate, ip, agent, cookie_crc)
            VALUES (:uid, :hash, :expiredate, :ip, :agent, :cookie_crc)
        ";

        $query_prepared = $this->dbh->prepare($query);
        $query_params = [
            'uid' => $uid,
            'hash' => $data['hash'],
            'expiredate' => date('Y-m-d H:i:s', $data['expire']),
            'ip' => $ip,
            'agent' => $agent,
            'cookie_crc' => $data['cookie_crc']
        ];

        if (!$query_prepared->execute($query_params)) {
            return false;
        }

        $cookie_options = [
            'expires' => $data['expire'],
            'path' => $this->config->cookie_path,
            'domain' => $this->config->cookie_domain,
            'secure' => $this->config->cookie_secure,
            'httponly' => $this->config->cookie_http,
            'samesite' => $this->config->cookie_samesite ?? 'Lax' // None || Lax  || Strict
        ];

        $_SESSION[$this->config->cookie_name] = $data['hash'];
        $_SESSION[$this->config->cookie_name . '_expire'] = $data['expire'];

        return $data;
    }

    /**
     * Removes all existing sessions for a given UID
     *
     * @param int $uid
     * @return bool
     */
    protected function deleteExistingSessions(int $uid): bool
    {
        $query = "DELETE FROM {$this->config->table_sessions} WHERE uid = :uid";
        $query_prepared = $this->dbh->prepare($query);
        $query_prepared->execute(['uid' => $uid]);

        unset($_SESSION[$this->config->cookie_name]);

        return $query_prepared->rowCount() > 0;
    }

    /**
     * Removes a session based on hash
     *
     * @param string $hash
     * @return bool
     */
    protected function deleteSession(string $hash): bool
    {
        $query = "DELETE FROM {$this->config->table_sessions} WHERE hash = :hash";
        $query_prepared = $this->dbh->prepare($query);
        $query_prepared->execute(['hash' => $hash]);

        unset($_SESSION[$this->config->cookie_name]);

        return $query_prepared->rowCount() == 1;
    }

    /**
     * Clear user session
     *
     * @return bool
     */
    protected function removeSession(): bool
    {
        unset($_SESSION[$this->config->cookie_name]);

        return true;
    }
}
